# Name workflow
name: mobalytics-tests

# When launch auto-tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

  # Manual hook for launch
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        type: choice
        options:
          - STG
          - PROD
        default: "STG"

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  REPORT_LINK_TELEGRAM: ${{ secrets.REPORT_LINK_TELEGRAM }}
  SLACK_CHAT_ID: ${{ secrets.SLACK_CHAT_ID }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}

jobs:
  ngf-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code from repository into runner (virtual machine)
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Caching npm-dependecies to speed up subsequent builds
      # - uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-npm-

      - name: Install npm
        run: npm i

      - name: Install PW with dependencies
        run: npx playwright install --with-deps

      # - name: Cache Playwright browsers
      #   uses: actions/cache@v3
      #   id: cache-pw
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-playwright-

      # If cache miss, download browsers + deps
      # - name: Install Playwright (full)
      #   if: steps.cache-pw.outputs.cache-hit != 'true'
      #   run: npx playwright install --with-deps

      # If cache hit, only install OS deps
      # - name: Install Playwright (OS deps only)
      #   if: steps.cache-pw.outputs.cache-hit == 'true'
      #   run: npx playwright install-deps

      - name: Launch auto-tests with ENV-override
        env:
          URL_SITEMAP: ${{ github.event.inputs.environment == 'PROD' && 'https://mobalytics.gg/sitemap.xml' || 'https://stg.mobalytics.gg/sitemap.xml' }}
          BASE_URL: ${{ github.event.inputs.environment == 'PROD' && 'https://mobalytics.gg' || 'https://stg.mobalytics.gg' }}
          ADMIN_EMAIL: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_ADMIN_EMAIL || secrets.STG_ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_ADMIN_PASSWORD || secrets.STG_ADMIN_PASSWORD }}
          GAME_MANAGER_EMAIL: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_GAME_MANAGER_EMAIL || secrets.STG_GAME_MANAGER_EMAIL }}
          GAME_MANAGER_PASSWORD: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_GAME_MANAGER_PASSWORD || secrets.STG_GAME_MANAGER_PASSWORD }}
          INTERNAL_WRITER_EMAIL: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_INTERNAL_WRITER_EMAIL || secrets.STG_INTERNAL_WRITER_EMAIL }}
          INTERNAL_WRITER_PASSWORD: ${{ github.event.inputs.environment == 'PROD' && secrets.PROD_INTERNAL_WRITER_PASSWORD || secrets.STG_INTERNAL_WRITER_PASSWORD }}
        run: npm test

      - name: Save playwright-results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 10

      - name: Save allure-results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results
          retention-days: 10

      - name: Get results from the previous launch
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Create allure-report from allure-results
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 10

      - name: Deploy report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Generate config.json with the secrets
        if: always()
        continue-on-error: true
        run: |
          mkdir -p notifications/tmp
          sed \
            -e "s|\$SLACK_CHAT_ID|${{ secrets.SLACK_CHAT_ID }}|g" \
            -e "s|\$SLACK_TOKEN|${{ secrets.SLACK_TOKEN }}|g" \
            -e "s|\$TELEGRAM_BOT_TOKEN|${{ secrets.TELEGRAM_BOT_TOKEN }}|g" \
            -e "s|\$TELEGRAM_CHAT_ID|${{ secrets.TELEGRAM_CHAT_ID }}|g" \
            -e "s|\$REPORT_LINK_TELEGRAM|${{ secrets.REPORT_LINK_TELEGRAM }}|g" \
            -e "s|\$BASE_URL|${{ github.event.inputs.environment == 'PROD' && 'https://mobalytics.gg' || 'https://stg.mobalytics.gg' }}|g" \
            notifications/config.json > notifications/tmp/config.json

      - name: Send Telegram & Slack notification
        if: always()
        continue-on-error: true
        run: |
          java "-DconfigFile=notifications/tmp/config.json" -jar notifications/allure-notifications-4.9.0.jar
